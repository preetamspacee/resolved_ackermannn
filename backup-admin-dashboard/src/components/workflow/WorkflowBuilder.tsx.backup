import React, { useState, useCallback, useEffect } from 'react';
import ReactFlow, {
  Node,
  Edge,
  addEdge,
  Connection,
  useNodesState,
  useEdgesState,
  Controls,
  Background,
  BackgroundVariant,
  MiniMap,
  Position,
  MarkerType,
  ReactFlowProvider,
  useReactFlow,
  Handle,
} from 'reactflow';
import 'reactflow/dist/style.css';
import {
  Play,
  Pause,
  Save,
  Eye,
  Zap,
  Timer,
  Users,
  AlertTriangle,
  GitBranch,
  Layers,
  Plus,
  Minus,
  Maximize,
  Minimize,
  Grid3X3,
  RefreshCw,
  XCircle,
  Trash2,
  ChevronLeft,
  ChevronRight,
  Settings,
  Bell,
  FileText,
  Edit3,
  Info,
  CheckCircle,
  X,
  Trash,
  Clock,
  Mail,
  MessageSquare,
  Database,
  Bot,
  Brain,
  Target,
  BarChart3,
  Calendar,
  DollarSign,
  Activity,
  Shield,
  Globe,
  Code,
  Terminal,
  Cloud,
  GitCommit,
  History,
  Share2,
  Lock,
  Archive,
  Tag,
  Folder,
  ChevronDown,
  ChevronUp,
  MoreHorizontal,
  List,
  Kanban,
  TrendingUp,
  AlertCircle,
  CheckCircle2,
  Clock3,
  EyeOff,
  Unlock,
  Bookmark,
  Star,
  Download,
  Upload,
  Search,
  Filter,
  Copy,
  Edit,
  ArrowRight,
  ArrowDown,
  ArrowUp,
  Bug,
  HelpCircle,
  Lightbulb,
  Wrench,
  Cpu,
  HardDrive,
  Network,
  Server,
  Smartphone,
  Monitor,
  Printer,
  Camera,
  Mic,
  Headphones,
  Wifi,
  Bluetooth,
  Battery,
  Power,
  Volume2,
  VolumeX,
  Sun,
  Moon,
  CloudRain,
  CloudSnow,
  Wind,
  Thermometer,
  Droplets,
  Flame,
  Snowflake,
  Umbrella,
  TreePine,
  Leaf,
  Flower2,
  Heart,
  Smile,
  Frown,
  Meh,
  ThumbsUp,
  ThumbsDown,
  Award,
  Gift,
  Cake,
  Coffee,
  Pizza,
  Apple,
  Carrot,
  Fish,
  Home,
  Building,
  Factory,
  Store,
  School,
  Building2,
  MapPin,
  Navigation,
  Compass,
  Plane,
  Car,
  Truck,
  Ship,
  Train,
  Bike,
  Bus,
  Rocket,
  Satellite,
  Telescope,
  Microscope,
  Stethoscope,
  Pill,
  Syringe,
  Bandage,
  Scissors,
  Hammer,
  Screwdriver,
  Drill,
  Saw,
  Paintbrush,
  Palette,
  Pen,
  Pencil,
  Eraser,
  Highlighter,
  Marker,
  Type,
  AlignLeft,
  AlignCenter,
  AlignRight,
  Bold,
  Italic,
  Underline,
  Strikethrough,
  Link,
  Image,
  Video,
  Music,
  Film,
  Radio,
  Tv,
  Gamepad2,
  Dice1,
  Dice2,
  Dice3,
  Dice4,
  Dice5,
  Dice6,
  Chess,
  Puzzle,
  Cards,
  Trophy,
  Medal,
  Crown,
  Gem,
  Diamond,
  Sparkles,
  Flashlight,
  Candle,
  Lamp,
  LampDesk,
  LampFloor,
  LampWall,
  LampCeiling,
  LightbulbOff,
  LightbulbOn,
  Sunrise,
  Sunset,
  CloudOff,
  CloudLightning,
  CloudDrizzle,
  CloudHail,
  CloudFog,
  Tornado,
  Hurricane,
  ThermometerSun,
  ThermometerSnow,
  Waves,
  Whale,
  Turtle,
  Bird,
  Cat,
  Dog,
  Rabbit,
  Mouse,
  Hamster,
  Squirrel,
  Fox,
  Wolf,
  Bear,
  Lion,
  Tiger,
  Elephant,
  Giraffe,
  Zebra,
  Horse,
  Cow,
  Pig,
  Sheep,
  Goat,
  Chicken,
  Duck,
  Turkey,
  Eagle,
  Owl,
  Bat,
  Bee,
  Butterfly,
  Ladybug,
  Spider,
  Ant,
  Snail,
  Octopus,
  Crab,
  Lobster,
  Shrimp,
  Squid,
  Jellyfish,
  Starfish,
  Coral,
  TreePalm,
  TreeDeciduous,
  Rose,
  Tulip,
  Sunflower,
  Cherry,
  Banana,
  Orange,
  Lemon,
  Lime,
  Grape,
  Strawberry,
  Blueberry,
  Raspberry,
  Blackberry,
  Watermelon,
  Pineapple,
  Mango,
  Peach,
  Pear,
  Kiwi,
  Avocado,
  Coconut,
  Broccoli,
  Corn,
  Pepper,
  Tomato,
  Onion,
  Garlic,
  Potato,
  SweetPotato,
  Mushroom,
  Lettuce,
  Spinach,
  Cabbage,
  Cauliflower,
  Eggplant,
  Cucumber,
  Pumpkin,
  Squash,
  Radish,
  Beet,
  Turnip,
  Parsnip,
  Celery,
  Asparagus,
  Artichoke,
  BrusselsSprouts,
  Kale,
  Arugula,
  Basil,
  Oregano,
  Thyme,
  Rosemary,
  Sage,
  Mint,
  Cilantro,
  Parsley,
  Dill,
  Chives,
  Ginger,
  Turmeric,
  Cinnamon,
  Nutmeg,
  Clove,
  Cardamom,
  Vanilla,
  Tea,
  HotChocolate,
  Milk,
  Water,
  Juice,
  Soda,
  Beer,
  Wine,
  Cocktail,
  Whiskey,
  Vodka,
  Rum,
  Gin,
  Brandy,
  Champagne,
  Prosecco,
  Cider,
  Mead,
  Kefir,
  Yogurt,
  Cheese,
  Butter,
  Cream,
  SourCream,
  CottageCheese,
  Mozzarella,
  Cheddar,
  Swiss,
  Parmesan,
  Feta,
  GoatCheese,
  BlueCheese,
  Brie,
  Camembert,
  Gouda,
  Edam,
  Havarti,
  Provolone,
  Ricotta,
  Mascarpone,
  CreamCheese,
  GreekYogurt,
  Skyr,
  Quark,
  Buttermilk,
  AlmondMilk,
  SoyMilk,
  OatMilk,
  CoconutMilk,
  RiceMilk,
  HempMilk,
  CashewMilk,
  MacadamiaMilk,
  HazelnutMilk,
  WalnutMilk,
  PistachioMilk,
  PeanutMilk,
  SunflowerMilk,
  SesameMilk,
  FlaxMilk,
  ChiaMilk,
  QuinoaMilk,
  SpeltMilk,
  KamutMilk,
  AmaranthMilk,
  TeffMilk,
  MilletMilk,
  BuckwheatMilk,
  BarleyMilk,
  RyeMilk,
  WheatMilk,
  CornMilk,
  PotatoMilk,
  PeaMilk,
  LupinMilk,
  TigerNutMilk,
  Horchata,
  Orgeat,
  Falernum,
  Grenadine,
  SimpleSyrup,
  Agave,
  Honey,
  MapleSyrup,
  Molasses,
  Stevia,
  MonkFruit,
  Erythritol,
  Xylitol,
  Sorbitol,
  Maltitol,
  Isomalt,
  Lactitol,
  Mannitol,
  Inulin,
  Oligofructose,
  Fructooligosaccharides,
  Galactooligosaccharides,
  Xylooligosaccharides,
  Arabinoxylooligosaccharides,
  PecticOligosaccharides,
  Chitooligosaccharides,
  Lactulose,
  Raffinose,
  Stachyose,
  Verbascose,
  Ajugose,
  Planteose,
  Sesamose,
  Umbelliferose,
  Lychnose,
  Manneotriose,
  Melezitose,
  Maltotriose,
  Panose,
  Isomaltotriose,
  Kojibiose,
  Nigerose,
  Laminaribiose,
  Sophorose,
  Turanose,
  Maltulose,
  Palatinose,
  Gentibiose,
  Cellobiose,
  Lactose,
  Maltose,
  Sucrose,
  Trehalose,
  Melibiose,
  Primeverose,
  Rutinose,
  Vicianose,
  Robinobiose,
  Fucosyllactose,
  LactoNtetraose,
  LactoNneotetraose,
  LactoNfucopentaose,
  LactoNdifucohexaose,
  Sialyllactose,
  Disialyllactose,
  Trisialyllactose,
  Tetrasialyllactose,
  Pentasialyllactose,
  Hexasialyllactose,
  Heptasialyllactose,
  Octasialyllactose,
  Nonasialyllactose,
  Decasialyllactose,
  Undecasialyllactose,
  Dodecasialyllactose,
  Tridecasialyllactose,
  Tetradecasialyllactose,
  Pentadecasialyllactose,
  Hexadecasialyllactose,
  Heptadecasialyllactose,
  Octadecasialyllactose,
  Nonadecasialyllactose,
  Eicosasialyllactose,
  Heneicosasialyllactose,
  Docosasialyllactose,
  Tricosasialyllactose,
  Tetracosasialyllactose,
  Pentacosasialyllactose,
  Hexacosasialyllactose,
  Heptacosasialyllactose,
  Octacosasialyllactose,
  Nonacosasialyllactose,
  Triacontasialyllactose,
  Hentriacontasialyllactose,
  Dotriacontasialyllactose,
  Tritriacontasialyllactose,
  Tetratriacontasialyllactose,
  Pentatriacontasialyllactose,
  Hexatriacontasialyllactose,
  Heptatriacontasialyllactose,
  Octatriacontasialyllactose,
  Nonatriacontasialyllactose,
  Tetracontasialyllactose,
  Hentetracontasialyllactose,
  Dotetracontasialyllactose,
  Tritetracontasialyllactose,
  Tetratetracontasialyllactose,
  Pentatetracontasialyllactose,
  Hexatetracontasialyllactose,
  Heptatetracontasialyllactose,
  Octatetracontasialyllactose,
  Nonatetracontasialyllactose,
  Pentacontasialyllactose,
  Hentriacontasialyllactose,
  Dotriacontasialyllactose,
  Tritriacontasialyllactose,
  Tetratriacontasialyllactose,
  Pentatriacontasialyllactose,
  Hexatriacontasialyllactose,
  Heptatriacontasialyllactose,
  Octatriacontasialyllactose,
  Nonatriacontasialyllactose,
  Tetracontasialyllactose,
  Hentetracontasialyllactose,
  Dotetracontasialyllactose,
  Tritetracontasialyllactose,
  Tetratetracontasialyllactose,
  Pentatetracontasialyllactose,
  Hexatetracontasialyllactose,
  Heptatetracontasialyllactose,
  Octatetracontasialyllactose,
  Nonatetracontasialyllactose,
  Pentacontasialyllactose,
  Calculator,
  CreditCard
} from 'lucide-react';

// Transition State Interfaces
interface TransitionCondition {
  id: string;
  field: string;
  operator: string;
  value: string;
}

interface TransitionAction {
  id: string;
  type: 'notification' | 'log' | 'update_field';
  config: any;
}

interface TransitionState {
  id: string;
  label: string;
  description: string;
  conditions: TransitionCondition[];
  conditionLogic: 'AND' | 'OR';
  priority: number;
  timeout?: number;
  fallbackNodeId?: string;
  preActions: TransitionAction[];
  status: 'active' | 'failed' | 'pending';
  color: string;
}

// Comprehensive Palette Items
const paletteItems = {
  triggers: [
    { id: 'webhook', label: 'Webhook', icon: Zap, color: 'yellow', description: 'Start workflow execution' },
    { id: 'schedule', label: 'Schedule', icon: Clock, color: 'blue', description: 'Time-based trigger' },
    { id: 'email', label: 'Email', icon: Mail, color: 'green', description: 'Email received trigger' },
    { id: 'file', label: 'File Upload', icon: Upload, color: 'purple', description: 'File upload trigger' },
    { id: 'api', label: 'API Call', icon: Code, color: 'indigo', description: 'REST API trigger' },
    { id: 'database', label: 'Database', icon: Database, color: 'gray', description: 'Database change trigger' },
    { id: 'form', label: 'Form Submit', icon: FileText, color: 'pink', description: 'Form submission trigger' },
    { id: 'user', label: 'User Action', icon: Users, color: 'orange', description: 'User interaction trigger' },
  ],
  actions: [
    { id: 'notify', label: 'Notify', icon: Bell, color: 'blue', description: 'Send notification' },
    { id: 'email', label: 'Send Email', icon: Mail, color: 'green', description: 'Send email message' },
    { id: 'update', label: 'Update Field', icon: Edit3, color: 'purple', description: 'Update data field' },
    { id: 'create', label: 'Create Record', icon: Plus, color: 'green', description: 'Create new record' },
    { id: 'delete', label: 'Delete Record', icon: Trash2, color: 'red', description: 'Delete record' },
    { id: 'assign', label: 'Assign Task', icon: Users, color: 'blue', description: 'Assign to user' },
    { id: 'escalate', label: 'Escalate', icon: ArrowUp, color: 'red', description: 'Escalate to manager' },
    { id: 'approve', label: 'Approve', icon: CheckCircle, color: 'green', description: 'Approve request' },
    { id: 'reject', label: 'Reject', icon: XCircle, color: 'red', description: 'Reject request' },
    { id: 'log', label: 'Log Entry', icon: FileText, color: 'gray', description: 'Create log entry' },
    { id: 'webhook', label: 'Webhook Call', icon: Zap, color: 'yellow', description: 'Call external webhook' },
    { id: 'api', label: 'API Call', icon: Code, color: 'indigo', description: 'Make API request' },
    { id: 'database', label: 'Database Query', icon: Database, color: 'gray', description: 'Execute database query' },
    { id: 'file', label: 'File Operation', icon: FileText, color: 'purple', description: 'File manipulation' },
    { id: 'integration', label: 'Integration', icon: Share2, color: 'blue', description: 'External integration' },
    { id: 'calculation', label: 'Calculate', icon: Calculator, color: 'orange', description: 'Perform calculation' },
    { id: 'transform', label: 'Transform Data', icon: RefreshCw, color: 'purple', description: 'Data transformation' },
    { id: 'validate', label: 'Validate', icon: Shield, color: 'green', description: 'Data validation' },
    { id: 'archive', label: 'Archive', icon: Archive, color: 'gray', description: 'Archive record' },
    { id: 'backup', label: 'Backup', icon: Download, color: 'blue', description: 'Create backup' },
  ],
  conditions: [
    { id: 'priority', label: 'Priority Check', icon: AlertTriangle, color: 'red', description: 'Check priority level' },
    { id: 'department', label: 'Department', icon: Users, color: 'blue', description: 'Department condition' },
    { id: 'status', label: 'Status', icon: CheckCircle, color: 'green', description: 'Status condition' },
    { id: 'sla', label: 'SLA Check', icon: Timer, color: 'yellow', description: 'SLA condition' },
    { id: 'date', label: 'Date/Time', icon: Calendar, color: 'purple', description: 'Date/time condition' },
    { id: 'amount', label: 'Amount', icon: DollarSign, color: 'green', description: 'Amount condition' },
    { id: 'user', label: 'User Role', icon: Shield, color: 'blue', description: 'User role condition' },
    { id: 'location', label: 'Location', icon: MapPin, color: 'orange', description: 'Location condition' },
    { id: 'custom', label: 'Custom Field', icon: Settings, color: 'gray', description: 'Custom field condition' },
    { id: 'file', label: 'File Type', icon: FileText, color: 'purple', description: 'File type condition' },
    { id: 'email', label: 'Email Content', icon: Mail, color: 'blue', description: 'Email content condition' },
    { id: 'database', label: 'Database Query', icon: Database, color: 'gray', description: 'Database condition' },
    { id: 'api', label: 'API Response', icon: Code, color: 'indigo', description: 'API response condition' },
    { id: 'workflow', label: 'Workflow State', icon: GitBranch, color: 'green', description: 'Workflow state condition' },
    { id: 'approval', label: 'Approval Status', icon: CheckCircle2, color: 'green', description: 'Approval condition' },
  ],
  delays: [
    { id: 'wait', label: 'Wait', icon: Clock, color: 'blue', description: 'Wait for specified time' },
    { id: 'schedule', label: 'Schedule', icon: Calendar, color: 'green', description: 'Schedule for later' },
    { id: 'business_hours', label: 'Business Hours', icon: Clock3, color: 'purple', description: 'Wait for business hours' },
    { id: 'weekend', label: 'Weekend', icon: Calendar, color: 'orange', description: 'Wait for weekend' },
    { id: 'holiday', label: 'Holiday', icon: Gift, color: 'red', description: 'Wait for holiday' },
    { id: 'event', label: 'Event', icon: Star, color: 'yellow', description: 'Wait for event' },
    { id: 'condition', label: 'Conditional Wait', icon: GitBranch, color: 'gray', description: 'Wait for condition' },
    { id: 'external', label: 'External Signal', icon: Bell, color: 'blue', description: 'Wait for external signal' },
  ],
  approvals: [
    { id: 'manager', label: 'Manager Approval', icon: Users, color: 'blue', description: 'Human approval required' },
    { id: 'team', label: 'Team Approval', icon: Users, color: 'green', description: 'Team consensus required' },
    { id: 'executive', label: 'Executive Approval', icon: Crown, color: 'purple', description: 'Executive approval' },
    { id: 'technical', label: 'Technical Review', icon: Code, color: 'orange', description: 'Technical review' },
    { id: 'legal', label: 'Legal Review', icon: Shield, color: 'red', description: 'Legal review' },
    { id: 'finance', label: 'Finance Approval', icon: DollarSign, color: 'green', description: 'Finance approval' },
    { id: 'compliance', label: 'Compliance Check', icon: CheckCircle, color: 'blue', description: 'Compliance review' },
    { id: 'security', label: 'Security Review', icon: Lock, color: 'red', description: 'Security review' },
    { id: 'quality', label: 'Quality Check', icon: Target, color: 'purple', description: 'Quality assurance' },
    { id: 'custom', label: 'Custom Approval', icon: Settings, color: 'gray', description: 'Custom approval process' },
  ],
  subworkflows: [
    { id: 'employee_onboarding', label: 'Employee Onboarding', icon: Users, color: 'blue', description: 'Call another workflow' },
    { id: 'incident_response', label: 'Incident Response', icon: AlertTriangle, color: 'red', description: 'Incident workflow' },
    { id: 'approval_process', label: 'Approval Process', icon: CheckCircle, color: 'green', description: 'Approval workflow' },
    { id: 'notification_flow', label: 'Notification Flow', icon: Bell, color: 'yellow', description: 'Notification workflow' },
    { id: 'data_processing', label: 'Data Processing', icon: Database, color: 'purple', description: 'Data workflow' },
    { id: 'integration_flow', label: 'Integration Flow', icon: Share2, color: 'indigo', description: 'Integration workflow' },
    { id: 'reporting', label: 'Reporting', icon: BarChart3, color: 'green', description: 'Report generation' },
    { id: 'backup_flow', label: 'Backup Flow', icon: Download, color: 'blue', description: 'Backup workflow' },
    { id: 'custom_workflow', label: 'Custom Workflow', icon: Settings, color: 'gray', description: 'Custom workflow' },
  ],
  error_handlers: [
    { id: 'retry', label: 'Retry', icon: RefreshCw, color: 'blue', description: 'Handle errors' },
    { id: 'fallback', label: 'Fallback', icon: ArrowDown, color: 'orange', description: 'Fallback action' },
    { id: 'escalate_error', label: 'Escalate Error', icon: AlertTriangle, color: 'red', description: 'Escalate error' },
    { id: 'log_error', label: 'Log Error', icon: FileText, color: 'gray', description: 'Log error details' },
    { id: 'notify_error', label: 'Notify Error', icon: Bell, color: 'red', description: 'Notify about error' },
    { id: 'skip', label: 'Skip', icon: ArrowRight, color: 'yellow', description: 'Skip on error' },
    { id: 'abort', label: 'Abort', icon: XCircle, color: 'red', description: 'Abort workflow' },
    { id: 'custom_error', label: 'Custom Handler', icon: Settings, color: 'purple', description: 'Custom error handling' },
  ],
  integrations: [
    { id: 'slack', label: 'Slack', icon: MessageSquare, color: 'purple', description: 'Slack integration' },
    { id: 'teams', label: 'Microsoft Teams', icon: Users, color: 'blue', description: 'Teams integration' },
    { id: 'email', label: 'Email Service', icon: Mail, color: 'green', description: 'Email integration' },
    { id: 'sms', label: 'SMS Service', icon: Smartphone, color: 'orange', description: 'SMS integration' },
    { id: 'calendar', label: 'Calendar', icon: Calendar, color: 'blue', description: 'Calendar integration' },
    { id: 'crm', label: 'CRM System', icon: Users, color: 'green', description: 'CRM integration' },
    { id: 'erp', label: 'ERP System', icon: Building2, color: 'purple', description: 'ERP integration' },
    { id: 'database', label: 'Database', icon: Database, color: 'gray', description: 'Database integration' },
    { id: 'api', label: 'REST API', icon: Code, color: 'indigo', description: 'REST API integration' },
    { id: 'webhook', label: 'Webhook', icon: Zap, color: 'yellow', description: 'Webhook integration' },
    { id: 'file', label: 'File System', icon: Folder, color: 'blue', description: 'File system integration' },
    { id: 'cloud', label: 'Cloud Storage', icon: Cloud, color: 'blue', description: 'Cloud storage integration' },
    { id: 'social', label: 'Social Media', icon: Share2, color: 'pink', description: 'Social media integration' },
    { id: 'payment', label: 'Payment Gateway', icon: CreditCard, color: 'green', description: 'Payment integration' },
    { id: 'analytics', label: 'Analytics', icon: BarChart3, color: 'purple', description: 'Analytics integration' },
  ],
  ai_actions: [
    { id: 'sentiment', label: 'Sentiment Analysis', icon: Brain, color: 'purple', description: 'Analyze sentiment' },
    { id: 'classification', label: 'Classification', icon: Target, color: 'blue', description: 'AI classification' },
    { id: 'extraction', label: 'Data Extraction', icon: FileText, color: 'green', description: 'Extract data' },
    { id: 'translation', label: 'Translation', icon: Globe, color: 'orange', description: 'Language translation' },
    { id: 'summarization', label: 'Summarization', icon: FileText, color: 'purple', description: 'Text summarization' },
    { id: 'prediction', label: 'Prediction', icon: TrendingUp, color: 'blue', description: 'AI prediction' },
    { id: 'recommendation', label: 'Recommendation', icon: Star, color: 'yellow', description: 'AI recommendation' },
    { id: 'chatbot', label: 'Chatbot Response', icon: Bot, color: 'green', description: 'Chatbot interaction' },
    { id: 'image_analysis', label: 'Image Analysis', icon: Camera, color: 'purple', description: 'Image processing' },
    { id: 'voice_analysis', label: 'Voice Analysis', icon: Mic, color: 'blue', description: 'Voice processing' },
  ],
  data_operations: [
    { id: 'transform', label: 'Transform', icon: RefreshCw, color: 'blue', description: 'Data transformation' },
    { id: 'filter', label: 'Filter', icon: Filter, color: 'green', description: 'Data filtering' },
    { id: 'sort', label: 'Sort', icon: ArrowUp, color: 'purple', description: 'Data sorting' },
    { id: 'aggregate', label: 'Aggregate', icon: BarChart3, color: 'orange', description: 'Data aggregation' },
    { id: 'join', label: 'Join', icon: Link, color: 'blue', description: 'Data joining' },
    { id: 'split', label: 'Split', icon: Scissors, color: 'red', description: 'Data splitting' },
    { id: 'merge', label: 'Merge', icon: Plus, color: 'green', description: 'Data merging' },
    { id: 'validate', label: 'Validate', icon: CheckCircle, color: 'green', description: 'Data validation' },
    { id: 'clean', label: 'Clean', icon: Trash2, color: 'gray', description: 'Data cleaning' },
    { id: 'enrich', label: 'Enrich', icon: Star, color: 'yellow', description: 'Data enrichment' },
  ],
  notifications: [
    { id: 'email', label: 'Email', icon: Mail, color: 'blue', description: 'Send email notification' },
    { id: 'sms', label: 'SMS', icon: Smartphone, color: 'green', description: 'Send SMS notification' },
    { id: 'push', label: 'Push Notification', icon: Bell, color: 'orange', description: 'Push notification' },
    { id: 'slack', label: 'Slack', icon: MessageSquare, color: 'purple', description: 'Slack notification' },
    { id: 'teams', label: 'Teams', icon: Users, color: 'blue', description: 'Teams notification' },
    { id: 'webhook', label: 'Webhook', icon: Zap, color: 'yellow', description: 'Webhook notification' },
    { id: 'dashboard', label: 'Dashboard Alert', icon: AlertTriangle, color: 'red', description: 'Dashboard alert' },
    { id: 'in_app', label: 'In-App', icon: Bell, color: 'blue', description: 'In-app notification' },
  ],
};

// Simple Node Components
function TriggerNode({ data, isConnectable, selected }: any) {
  return (
    <div className={`px-3 py-2 shadow-md rounded-md bg-white border-2 min-w-[160px] transition-all duration-300 ${
      selected ? 'border-blue-500 shadow-blue-100' : 'border-blue-200'
    }`}>
      <Handle
        type="source"
        position={Position.Bottom}
        id="bottom"
        style={{ background: '#3B82F6', width: 6, height: 6 }}
        isConnectable={isConnectable}
      />
      <div className="flex items-center space-x-1.5 mb-1">
        <div className="p-0.5 rounded-full bg-blue-50">
          <Zap className="text-blue-600" size={12} />
        </div>
        <div className="font-semibold text-blue-600 text-xs">Trigger</div>
      </div>
      <div className="text-xs font-medium text-gray-800 leading-tight">{data.label}</div>
      <div className="text-xs text-gray-500 mt-0.5 leading-tight">{data.description}</div>
    </div>
  );
}

function ActionNode({ data, isConnectable, selected }: any) {
  return (
    <div className={`px-3 py-2 shadow-md rounded-md bg-white border-2 min-w-[160px] transition-all duration-300 ${
      selected ? 'border-green-500 shadow-green-100' : 'border-green-200'
    }`}>
      <Handle
        type="target"
        position={Position.Top}
        id="top"
        style={{ background: '#10B981', width: 6, height: 6 }}
        isConnectable={isConnectable}
      />
      <Handle
        type="source"
        position={Position.Bottom}
        id="bottom"
        style={{ background: '#10B981', width: 6, height: 6 }}
        isConnectable={isConnectable}
      />
      <div className="flex items-center space-x-1.5 mb-1">
        <div className="p-0.5 rounded-full bg-green-50">
          <Play className="text-green-600" size={12} />
        </div>
        <div className="font-semibold text-green-600 text-xs">Action</div>
      </div>
      <div className="text-xs font-medium text-gray-800 leading-tight">{data.label}</div>
      <div className="text-xs text-gray-500 mt-0.5 leading-tight">{data.description}</div>
    </div>
  );
}

function ConditionNode({ data, isConnectable, selected }: any) {
  return (
    <div className={`px-3 py-2 shadow-md rounded-md bg-white border-2 min-w-[160px] transition-all duration-300 ${
      selected ? 'border-yellow-500 shadow-yellow-100' : 'border-yellow-200'
    }`}>
      <Handle
        type="target"
        position={Position.Top}
        id="top"
        style={{ background: '#F59E0B', width: 6, height: 6 }}
        isConnectable={isConnectable}
      />
      <Handle
        type="source"
        position={Position.Left}
        id="left"
        style={{ background: '#F59E0B', width: 6, height: 6 }}
        isConnectable={isConnectable}
      />
      <Handle
        type="source"
        position={Position.Right}
        id="right"
        style={{ background: '#F59E0B', width: 6, height: 6 }}
        isConnectable={isConnectable}
      />
      <div className="flex items-center space-x-1.5 mb-1">
        <div className="p-0.5 rounded-full bg-yellow-50">
          <GitBranch className="text-yellow-600" size={12} />
        </div>
        <div className="font-semibold text-yellow-600 text-xs">Condition</div>
      </div>
      <div className="text-xs font-medium text-gray-800 leading-tight">{data.label}</div>
      <div className="text-xs text-gray-500 mt-0.5 leading-tight">{data.description}</div>
    </div>
  );
}

// Additional Node Components
function DelayNode({ data, isConnectable, selected }: any) {
  return (
    <div className={`px-3 py-2 shadow-md rounded-md bg-white border-2 min-w-[160px] transition-all duration-300 ${
      selected ? 'border-purple-500 shadow-purple-100' : 'border-purple-200'
    }`}>
      <Handle
        type="target"
        position={Position.Top}
        id="top"
        style={{ background: '#8B5CF6', width: 6, height: 6 }}
        isConnectable={isConnectable}
      />
      <Handle
        type="source"
        position={Position.Bottom}
        id="bottom"
        style={{ background: '#8B5CF6', width: 6, height: 6 }}
        isConnectable={isConnectable}
      />
      <div className="flex items-center space-x-1.5 mb-1">
        <div className="p-0.5 rounded-full bg-purple-50">
          <Clock className="text-purple-600" size={12} />
        </div>
        <div className="font-semibold text-purple-600 text-xs">Delay</div>
      </div>
      <div className="text-xs font-medium text-gray-800 leading-tight">{data.label}</div>
      <div className="text-xs text-gray-500 mt-0.5 leading-tight">{data.description}</div>
    </div>
  );
}

function ApprovalNode({ data, isConnectable, selected }: any) {
  return (
    <div className={`px-3 py-2 shadow-md rounded-md bg-white border-2 min-w-[160px] transition-all duration-300 ${
      selected ? 'border-orange-500 shadow-orange-100' : 'border-orange-200'
    }`}>
      <Handle
        type="target"
        position={Position.Top}
        id="top"
        style={{ background: '#F97316', width: 6, height: 6 }}
        isConnectable={isConnectable}
      />
      <Handle
        type="source"
        position={Position.Bottom}
        id="bottom"
        style={{ background: '#F97316', width: 6, height: 6 }}
        isConnectable={isConnectable}
      />
      <div className="flex items-center space-x-1.5 mb-1">
        <div className="p-0.5 rounded-full bg-orange-50">
          <Users className="text-orange-600" size={12} />
        </div>
        <div className="font-semibold text-orange-600 text-xs">Approval</div>
      </div>
      <div className="text-xs font-medium text-gray-800 leading-tight">{data.label}</div>
      <div className="text-xs text-gray-500 mt-0.5 leading-tight">{data.description}</div>
    </div>
  );
}

function SubWorkflowNode({ data, isConnectable, selected }: any) {
  return (
    <div className={`px-3 py-2 shadow-md rounded-md bg-white border-2 min-w-[160px] transition-all duration-300 ${
      selected ? 'border-indigo-500 shadow-indigo-100' : 'border-indigo-200'
    }`}>
      <Handle
        type="target"
        position={Position.Top}
        id="top"
        style={{ background: '#6366F1', width: 6, height: 6 }}
        isConnectable={isConnectable}
      />
      <Handle
        type="source"
        position={Position.Bottom}
        id="bottom"
        style={{ background: '#6366F1', width: 6, height: 6 }}
        isConnectable={isConnectable}
      />
      <div className="flex items-center space-x-1.5 mb-1">
        <div className="p-0.5 rounded-full bg-indigo-50">
          <Layers className="text-indigo-600" size={12} />
        </div>
        <div className="font-semibold text-indigo-600 text-xs">Sub-Workflow</div>
      </div>
      <div className="text-xs font-medium text-gray-800 leading-tight">{data.label}</div>
      <div className="text-xs text-gray-500 mt-0.5 leading-tight">{data.description}</div>
    </div>
  );
}

function ErrorHandlerNode({ data, isConnectable, selected }: any) {
  return (
    <div className={`px-3 py-2 shadow-md rounded-md bg-white border-2 min-w-[160px] transition-all duration-300 ${
      selected ? 'border-red-500 shadow-red-100' : 'border-red-200'
    }`}>
      <Handle
        type="target"
        position={Position.Top}
        id="top"
        style={{ background: '#EF4444', width: 6, height: 6 }}
        isConnectable={isConnectable}
      />
      <Handle
        type="source"
        position={Position.Bottom}
        id="bottom"
        style={{ background: '#EF4444', width: 6, height: 6 }}
        isConnectable={isConnectable}
      />
      <div className="flex items-center space-x-1.5 mb-1">
        <div className="p-0.5 rounded-full bg-red-50">
          <AlertTriangle className="text-red-600" size={12} />
        </div>
        <div className="font-semibold text-red-600 text-xs">Error Handler</div>
      </div>
      <div className="text-xs font-medium text-gray-800 leading-tight">{data.label}</div>
      <div className="text-xs text-gray-500 mt-0.5 leading-tight">{data.description}</div>
    </div>
  );
}

function IntegrationNode({ data, isConnectable, selected }: any) {
  return (
    <div className={`px-3 py-2 shadow-md rounded-md bg-white border-2 min-w-[160px] transition-all duration-300 ${
      selected ? 'border-blue-500 shadow-blue-100' : 'border-blue-200'
    }`}>
      <Handle
        type="target"
        position={Position.Top}
        id="top"
        style={{ background: '#3B82F6', width: 6, height: 6 }}
        isConnectable={isConnectable}
      />
      <Handle
        type="source"
        position={Position.Bottom}
        id="bottom"
        style={{ background: '#3B82F6', width: 6, height: 6 }}
        isConnectable={isConnectable}
      />
      <div className="flex items-center space-x-1.5 mb-1">
        <div className="p-0.5 rounded-full bg-blue-50">
          <Share2 className="text-blue-600" size={12} />
        </div>
        <div className="font-semibold text-blue-600 text-xs">Integration</div>
      </div>
      <div className="text-xs font-medium text-gray-800 leading-tight">{data.label}</div>
      <div className="text-xs text-gray-500 mt-0.5 leading-tight">{data.description}</div>
    </div>
  );
}

function AIActionNode({ data, isConnectable, selected }: any) {
  return (
    <div className={`px-3 py-2 shadow-md rounded-md bg-white border-2 min-w-[160px] transition-all duration-300 ${
      selected ? 'border-purple-500 shadow-purple-100' : 'border-purple-200'
    }`}>
      <Handle
        type="target"
        position={Position.Top}
        id="top"
        style={{ background: '#8B5CF6', width: 6, height: 6 }}
        isConnectable={isConnectable}
      />
      <Handle
        type="source"
        position={Position.Bottom}
        id="bottom"
        style={{ background: '#8B5CF6', width: 6, height: 6 }}
        isConnectable={isConnectable}
      />
      <div className="flex items-center space-x-1.5 mb-1">
        <div className="p-0.5 rounded-full bg-purple-50">
          <Brain className="text-purple-600" size={12} />
        </div>
        <div className="font-semibold text-purple-600 text-xs">AI Action</div>
      </div>
      <div className="text-xs font-medium text-gray-800 leading-tight">{data.label}</div>
      <div className="text-xs text-gray-500 mt-0.5 leading-tight">{data.description}</div>
    </div>
  );
}

function DataOperationNode({ data, isConnectable, selected }: any) {
  return (
    <div className={`px-3 py-2 shadow-md rounded-md bg-white border-2 min-w-[160px] transition-all duration-300 ${
      selected ? 'border-gray-500 shadow-gray-100' : 'border-gray-200'
    }`}>
      <Handle
        type="target"
        position={Position.Top}
        id="top"
        style={{ background: '#6B7280', width: 6, height: 6 }}
        isConnectable={isConnectable}
      />
      <Handle
        type="source"
        position={Position.Bottom}
        id="bottom"
        style={{ background: '#6B7280', width: 6, height: 6 }}
        isConnectable={isConnectable}
      />
      <div className="flex items-center space-x-1.5 mb-1">
        <div className="p-0.5 rounded-full bg-gray-50">
          <Database className="text-gray-600" size={12} />
        </div>
        <div className="font-semibold text-gray-600 text-xs">Data Operation</div>
      </div>
      <div className="text-xs font-medium text-gray-800 leading-tight">{data.label}</div>
      <div className="text-xs text-gray-500 mt-0.5 leading-tight">{data.description}</div>
    </div>
  );
}

function NotificationNode({ data, isConnectable, selected }: any) {
  return (
    <div className={`px-3 py-2 shadow-md rounded-md bg-white border-2 min-w-[160px] transition-all duration-300 ${
      selected ? 'border-yellow-500 shadow-yellow-100' : 'border-yellow-200'
    }`}>
      <Handle
        type="target"
        position={Position.Top}
        id="top"
        style={{ background: '#EAB308', width: 6, height: 6 }}
        isConnectable={isConnectable}
      />
      <Handle
        type="source"
        position={Position.Bottom}
        id="bottom"
        style={{ background: '#EAB308', width: 6, height: 6 }}
        isConnectable={isConnectable}
      />
      <div className="flex items-center space-x-1.5 mb-1">
        <div className="p-0.5 rounded-full bg-yellow-50">
          <Bell className="text-yellow-600" size={12} />
        </div>
        <div className="font-semibold text-yellow-600 text-xs">Notification</div>
      </div>
      <div className="text-xs font-medium text-gray-800 leading-tight">{data.label}</div>
      <div className="text-xs text-gray-500 mt-0.5 leading-tight">{data.description}</div>
    </div>
  );
}

// Node Types
const nodeTypes = {
  trigger: TriggerNode,
  action: ActionNode,
  condition: ConditionNode,
  delay: DelayNode,
  approval: ApprovalNode,
  subworkflow: SubWorkflowNode,
  error_handler: ErrorHandlerNode,
  integration: IntegrationNode,
  ai_action: AIActionNode,
  data_operation: DataOperationNode,
  notification: NotificationNode,
};

// Initial nodes and edges
const initialNodes: Node[] = [
  {
    id: '1',
    type: 'trigger',
    position: { x: 250, y: 30 },
    data: { 
      label: 'New Employee Added',
      description: 'Triggered when HR adds new employee',
      type: 'webhook'
    },
  },
  {
    id: '2',
    type: 'action',
    position: { x: 250, y: 140 },
    data: { 
      label: 'Create Accounts',
      description: 'Create email, Slack, and system accounts',
      type: 'api'
    },
  },
  {
    id: '3',
    type: 'action',
    position: { x: 250, y: 250 },
    data: { 
      label: 'Assign Equipment',
      description: 'Assign laptop and office equipment',
      type: 'database'
    },
  },
  {
    id: '4',
    type: 'condition',
    position: { x: 250, y: 360 },
    data: { 
      label: 'Department Check',
      description: 'Check if employee is in IT department',
      type: 'condition'
    },
  },
  {
    id: '5',
    type: 'action',
    position: { x: 120, y: 470 },
    data: { 
      label: 'Schedule Training',
      description: 'Schedule IT-specific training',
      type: 'calendar'
    },
  },
  {
    id: '6',
    type: 'action',
    position: { x: 380, y: 470 },
    data: { 
      label: 'Send Welcome Email',
      description: 'Send general welcome email',
      type: 'email'
    },
  },
];

const initialEdges: Edge[] = [
  {
    id: 'e1-2',
    source: '1',
    target: '2',
    sourceHandle: 'bottom',
    targetHandle: 'top',
    type: 'smoothstep',
    markerEnd: {
      type: MarkerType.ArrowClosed,
    },
    style: { stroke: '#94A3B8', strokeWidth: 2 },
    data: {
      transitionState: {
        id: 't1-2',
        label: 'Account Creation',
        description: 'Transition to create user accounts',
        conditions: [],
        conditionLogic: 'AND',
        priority: 1,
        status: 'active',
        color: '#94A3B8',
        preActions: [],
      }
    }
  },
  {
    id: 'e2-3',
    source: '2',
    target: '3',
    sourceHandle: 'bottom',
    targetHandle: 'top',
    type: 'smoothstep',
    markerEnd: {
      type: MarkerType.ArrowClosed,
    },
    style: { stroke: '#94A3B8', strokeWidth: 2 },
    data: {
      transitionState: {
        id: 't2-3',
        label: 'Equipment Assignment',
        description: 'Transition to assign equipment',
        conditions: [],
        conditionLogic: 'AND',
        priority: 1,
        status: 'active',
        color: '#94A3B8',
        preActions: [],
      }
    }
  },
  {
    id: 'e3-4',
    source: '3',
    target: '4',
    sourceHandle: 'bottom',
    targetHandle: 'top',
    type: 'smoothstep',
    markerEnd: {
      type: MarkerType.ArrowClosed,
    },
    style: { stroke: '#94A3B8', strokeWidth: 2 },
    data: {
      transitionState: {
        id: 't3-4',
        label: 'Department Check',
        description: 'Transition to check department',
        conditions: [],
        conditionLogic: 'AND',
        priority: 1,
        status: 'active',
        color: '#94A3B8',
        preActions: [],
      }
    }
  },
  {
    id: 'e4-5',
    source: '4',
    target: '5',
    sourceHandle: 'left',
    targetHandle: 'top',
    type: 'smoothstep',
    markerEnd: {
      type: MarkerType.ArrowClosed,
    },
    style: { stroke: '#3B82F6', strokeWidth: 2 },
    label: 'Yes ⚡',
    labelStyle: { fill: '#3B82F6', fontWeight: 600 },
    data: {
      transitionState: {
        id: 't4-5',
        label: 'IT Training Path',
        description: 'Transition for IT department employees',
        conditions: [
          {
            id: 'cond1',
            field: 'department',
            operator: '=',
            value: 'IT'
          }
        ],
        conditionLogic: 'AND',
        priority: 1,
        status: 'active',
        color: '#3B82F6',
        preActions: [],
      }
    }
  },
  {
    id: 'e4-6',
    source: '4',
    target: '6',
    sourceHandle: 'right',
    targetHandle: 'top',
    type: 'smoothstep',
    markerEnd: {
      type: MarkerType.ArrowClosed,
    },
    style: { stroke: '#10B981', strokeWidth: 2 },
    label: 'No ⚡',
    labelStyle: { fill: '#10B981', fontWeight: 600 },
    data: {
      transitionState: {
        id: 't4-6',
        label: 'General Welcome',
        description: 'Transition for non-IT department employees',
        conditions: [
          {
            id: 'cond2',
            field: 'department',
            operator: '!=',
            value: 'IT'
          }
        ],
        conditionLogic: 'AND',
        priority: 1,
        status: 'active',
        color: '#10B981',
        preActions: [],
      }
    }
  },
];

// Simple Transition Dialogue Box Component
function TransitionDialogueBox({ 
  isOpen, 
  onClose, 
  transition, 
  onSave, 
  onDelete 
}: {
  isOpen: boolean;
  onClose: () => void;
  transition: TransitionState | null;
  onSave: (transition: TransitionState) => void;
  onDelete: () => void;
}) {
  const [label, setLabel] = useState('');
  const [description, setDescription] = useState('');
  
  useEffect(() => {
    if (transition) {
      setLabel(transition.label);
      setDescription(transition.description);
    }
  }, [transition]);

  if (!isOpen || !transition) {
    return null;
  }

  const handleSave = () => {
    onSave({
      ...transition,
      label,
      description,
    });
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-xl w-full max-w-2xl p-6">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-xl font-semibold text-gray-900">Transition Configuration</h2>
          <button
            onClick={onClose}
            className="p-2 text-gray-400 hover:text-gray-600 rounded-lg hover:bg-gray-100 transition-colors"
          >
            <X size={20} />
          </button>
        </div>

        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Transition Label</label>
            <input
              type="text"
              value={label}
              onChange={(e) => setLabel(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              placeholder="e.g., Escalate to Manager"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Description</label>
            <textarea
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              rows={3}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 resize-none"
              placeholder="Describe what this transition does..."
            />
          </div>

          <div className="bg-gray-50 p-4 rounded-lg">
            <h3 className="text-sm font-medium text-gray-700 mb-2">Current Conditions</h3>
            {transition.conditions.length > 0 ? (
              <div className="space-y-2">
                {transition.conditions.map((condition, index) => (
                  <div key={condition.id} className="text-sm text-gray-600">
                    {condition.field} {condition.operator} {condition.value}
                  </div>
                ))}
              </div>
            ) : (
              <p className="text-sm text-gray-500">No conditions set</p>
            )}
          </div>
        </div>

        <div className="flex items-center justify-between mt-6 pt-4 border-t border-gray-200">
          <button
            onClick={onDelete}
            className="flex items-center space-x-2 px-4 py-2 text-red-600 bg-red-50 border border-red-200 rounded-lg hover:bg-red-100 transition-colors"
          >
            <Trash size={16} />
            <span>Delete Transition</span>
          </button>
          <div className="flex items-center space-x-3">
            <button
              onClick={onClose}
              className="px-4 py-2 text-gray-600 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
            >
              Cancel
            </button>
            <button
              onClick={handleSave}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
            >
              Save Transition
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}

// Main Workflow Builder Component
function WorkflowBuilderContent() {
  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);
  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);
  const [selectedNode, setSelectedNode] = useState<any>(null);
  const [selectedEdge, setSelectedEdge] = useState<any>(null);
  const [isTransitionDialogueOpen, setIsTransitionDialogueOpen] = useState(false);
  const [currentTransition, setCurrentTransition] = useState<TransitionState | null>(null);
  const [isPaletteCollapsed, setIsPaletteCollapsed] = useState(false);
  const [workflowName, setWorkflowName] = useState('Employee Onboarding');
  const [workflowDescription, setWorkflowDescription] = useState('Automated workflow for new employee setup');
  const [isRunning, setIsRunning] = useState(false);
  const [isFullScreen, setIsFullScreen] = useState(false);

  const reactFlowInstance = useReactFlow();

  const onConnect = useCallback(
    (params: Connection) => {
      const newEdge = {
        ...params,
        type: 'smoothstep',
        markerEnd: { type: MarkerType.ArrowClosed },
        style: { stroke: '#94A3B8', strokeWidth: 2 },
        data: {
          transitionState: {
            id: `t${params.source}-${params.target}`,
            label: 'New Transition',
            description: 'Configure this transition',
            conditions: [],
            conditionLogic: 'AND',
            priority: 1,
            status: 'active',
            color: '#94A3B8',
            preActions: [],
          }
        }
      };
      setEdges((eds) => addEdge(newEdge, eds));
    },
    [setEdges]
  );

  const onNodeClick = useCallback((event: any, node: any) => {
    setSelectedNode(node);
    setSelectedEdge(null);
  }, []);

  const onEdgeClick = useCallback((event: any, edge: any) => {
    event.stopPropagation();
    setSelectedEdge(edge);
    setSelectedNode(null);
    
    const transitionState = edge.data?.transitionState || {
      id: edge.id,
      label: edge.label || 'Transition',
      description: 'Configure this transition',
      conditions: [],
      conditionLogic: 'AND',
      priority: 1,
      status: 'active',
      color: edge.style?.stroke || '#94A3B8',
      preActions: [],
    };
    
    setCurrentTransition(transitionState);
    setIsTransitionDialogueOpen(true);
  }, []);

  const handleTransitionSave = useCallback((transition: TransitionState) => {
    setEdges((eds) =>
      eds.map((edge) =>
        edge.id === selectedEdge?.id
          ? {
              ...edge,
              data: { ...edge.data, transitionState: transition },
              style: {
                ...edge.style,
                stroke: transition.status === 'failed' ? '#EF4444' : 
                       transition.conditions.length > 0 ? '#3B82F6' : '#94A3B8',
                strokeWidth: transition.status === 'failed' ? 3 : 2,
              },
              label: transition.conditions.length > 0 ? `${transition.label} ⚡` : transition.label,
              labelStyle: { fill: transition.status === 'failed' ? '#EF4444' : '#374151', fontWeight: 600 },
            }
          : edge
      )
    );
    setIsTransitionDialogueOpen(false);
    setSelectedEdge(null);
    setCurrentTransition(null);
  }, [selectedEdge, setEdges]);

  const handleTransitionCancel = useCallback(() => {
    setIsTransitionDialogueOpen(false);
    setSelectedEdge(null);
    setCurrentTransition(null);
  }, []);

  const handleTransitionDelete = useCallback(() => {
    if (selectedEdge) {
      setEdges((eds) => eds.filter((edge) => edge.id !== selectedEdge.id));
    }
    setIsTransitionDialogueOpen(false);
    setSelectedEdge(null);
    setCurrentTransition(null);
  }, [selectedEdge, setEdges]);

  const handleSave = () => {
    console.log('Saving workflow:', { nodes, edges, workflowName, workflowDescription });
  };

  const handleRun = () => {
    setIsRunning(true);
    setTimeout(() => setIsRunning(false), 3000);
  };

  const handleAutoArrange = () => {
    const layoutedNodes = nodes.map((node, index) => ({
      ...node,
      position: {
        x: 300 + (index % 2) * 300,
        y: 50 + Math.floor(index / 2) * 200,
      },
    }));
    setNodes(layoutedNodes);
    reactFlowInstance.fitView();
  };

  const handleZoomIn = () => {
    reactFlowInstance.zoomIn();
  };

  const handleZoomOut = () => {
    reactFlowInstance.zoomOut();
  };

  const handleFitView = () => {
    reactFlowInstance.fitView();
  };

  const handleFullScreen = () => {
    setIsFullScreen(!isFullScreen);
  };

  return (
    <div className={`flex bg-gray-50 transition-all duration-300 ${isFullScreen ? 'fixed inset-0 z-50 h-screen' : 'h-screen'}`}>
      {/* Palette Sidebar */}
      {!isFullScreen && (
        <div className={`bg-white border-r border-gray-200 shadow-sm transition-all duration-300 ${
          isPaletteCollapsed ? 'w-12' : 'w-64'
        }`}>
          {isPaletteCollapsed ? (
            <div className="p-2">
              <button
                onClick={() => setIsPaletteCollapsed(false)}
                className="w-full p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition-colors"
                title="Expand Palette"
              >
                <ChevronRight size={16} />
              </button>
            </div>
          ) : (
            <div className="p-4">
              <div className="flex items-center justify-between mb-4">
                <h3 className="font-semibold text-gray-900">Palette</h3>
                <button
                  onClick={() => setIsPaletteCollapsed(true)}
                  className="p-1 text-gray-400 hover:text-gray-600 rounded-lg hover:bg-gray-100 transition-colors"
                  title="Collapse Palette"
                >
                  <ChevronLeft size={16} />
                </button>
              </div>
              
              {/* Comprehensive Node Palette */}
              <div className="space-y-4 max-h-[calc(100vh-200px)] overflow-y-auto">
                {/* Triggers */}
                <div className="mb-4">
                  <h4 className="text-sm font-medium text-gray-700 mb-3 flex items-center">
                    <Zap size={14} className="mr-2" />
                    Triggers
                  </h4>
                  <div className="space-y-2">
                    {paletteItems.triggers.map((item) => {
                      const IconComponent = item.icon;
                      return (
                        <div
                          key={item.id}
                          className="flex items-center space-x-3 p-2 rounded-lg border border-gray-200 hover:bg-gray-50 cursor-pointer transition-colors"
                          draggable
                          onDragStart={(e) => {
                            e.dataTransfer.setData('application/json', JSON.stringify({
                              type: 'trigger',
                              id: item.id,
                              label: item.label,
                              description: item.description,
                            }));
                          }}
                          title={item.description}
                        >
                          <div className={`p-1 rounded-full bg-${item.color}-100`}>
                            <IconComponent className={`text-${item.color}-600`} size={14} />
                          </div>
                          <div className="flex-1 min-w-0">
                            <span className="text-sm text-gray-700 font-medium">{item.label}</span>
                            <p className="text-xs text-gray-500 truncate">{item.description}</p>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>

                {/* Actions */}
                <div className="mb-4">
                  <h4 className="text-sm font-medium text-gray-700 mb-3 flex items-center">
                    <Play size={14} className="mr-2" />
                    Actions
                  </h4>
                  <div className="space-y-2">
                    {paletteItems.actions.map((item) => {
                      const IconComponent = item.icon;
                      return (
                        <div
                          key={item.id}
                          className="flex items-center space-x-3 p-2 rounded-lg border border-gray-200 hover:bg-gray-50 cursor-pointer transition-colors"
                          draggable
                          onDragStart={(e) => {
                            e.dataTransfer.setData('application/json', JSON.stringify({
                              type: 'action',
                              id: item.id,
                              label: item.label,
                              description: item.description,
                            }));
                          }}
                          title={item.description}
                        >
                          <div className={`p-1 rounded-full bg-${item.color}-100`}>
                            <IconComponent className={`text-${item.color}-600`} size={14} />
                          </div>
                          <div className="flex-1 min-w-0">
                            <span className="text-sm text-gray-700 font-medium">{item.label}</span>
                            <p className="text-xs text-gray-500 truncate">{item.description}</p>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>

                {/* Conditions */}
                <div className="mb-4">
                  <h4 className="text-sm font-medium text-gray-700 mb-3 flex items-center">
                    <GitBranch size={14} className="mr-2" />
                    Conditions
                  </h4>
                  <div className="space-y-2">
                    {paletteItems.conditions.map((item) => {
                      const IconComponent = item.icon;
                      return (
                        <div
                          key={item.id}
                          className="flex items-center space-x-3 p-2 rounded-lg border border-gray-200 hover:bg-gray-50 cursor-pointer transition-colors"
                          draggable
                          onDragStart={(e) => {
                            e.dataTransfer.setData('application/json', JSON.stringify({
                              type: 'condition',
                              id: item.id,
                              label: item.label,
                              description: item.description,
                            }));
                          }}
                          title={item.description}
                        >
                          <div className={`p-1 rounded-full bg-${item.color}-100`}>
                            <IconComponent className={`text-${item.color}-600`} size={14} />
                          </div>
                          <div className="flex-1 min-w-0">
                            <span className="text-sm text-gray-700 font-medium">{item.label}</span>
                            <p className="text-xs text-gray-500 truncate">{item.description}</p>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>

                {/* Delays */}
                <div className="mb-4">
                  <h4 className="text-sm font-medium text-gray-700 mb-3 flex items-center">
                    <Clock size={14} className="mr-2" />
                    Delays
                  </h4>
                  <div className="space-y-2">
                    {paletteItems.delays.map((item) => {
                      const IconComponent = item.icon;
                      return (
                        <div
                          key={item.id}
                          className="flex items-center space-x-3 p-2 rounded-lg border border-gray-200 hover:bg-gray-50 cursor-pointer transition-colors"
                          draggable
                          onDragStart={(e) => {
                            e.dataTransfer.setData('application/json', JSON.stringify({
                              type: 'delay',
                              id: item.id,
                              label: item.label,
                              description: item.description,
                            }));
                          }}
                          title={item.description}
                        >
                          <div className={`p-1 rounded-full bg-${item.color}-100`}>
                            <IconComponent className={`text-${item.color}-600`} size={14} />
                          </div>
                          <div className="flex-1 min-w-0">
                            <span className="text-sm text-gray-700 font-medium">{item.label}</span>
                            <p className="text-xs text-gray-500 truncate">{item.description}</p>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>

                {/* Approvals */}
                <div className="mb-4">
                  <h4 className="text-sm font-medium text-gray-700 mb-3 flex items-center">
                    <Users size={14} className="mr-2" />
                    Approvals
                  </h4>
                  <div className="space-y-2">
                    {paletteItems.approvals.map((item) => {
                      const IconComponent = item.icon;
                      return (
                        <div
                          key={item.id}
                          className="flex items-center space-x-3 p-2 rounded-lg border border-gray-200 hover:bg-gray-50 cursor-pointer transition-colors"
                          draggable
                          onDragStart={(e) => {
                            e.dataTransfer.setData('application/json', JSON.stringify({
                              type: 'approval',
                              id: item.id,
                              label: item.label,
                              description: item.description,
                            }));
                          }}
                          title={item.description}
                        >
                          <div className={`p-1 rounded-full bg-${item.color}-100`}>
                            <IconComponent className={`text-${item.color}-600`} size={14} />
                          </div>
                          <div className="flex-1 min-w-0">
                            <span className="text-sm text-gray-700 font-medium">{item.label}</span>
                            <p className="text-xs text-gray-500 truncate">{item.description}</p>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>

                {/* Sub-Workflows */}
                <div className="mb-4">
                  <h4 className="text-sm font-medium text-gray-700 mb-3 flex items-center">
                    <Layers size={14} className="mr-2" />
                    Sub-Workflows
                  </h4>
                  <div className="space-y-2">
                    {paletteItems.subworkflows.map((item) => {
                      const IconComponent = item.icon;
                      return (
                        <div
                          key={item.id}
                          className="flex items-center space-x-3 p-2 rounded-lg border border-gray-200 hover:bg-gray-50 cursor-pointer transition-colors"
                          draggable
                          onDragStart={(e) => {
                            e.dataTransfer.setData('application/json', JSON.stringify({
                              type: 'subworkflow',
                              id: item.id,
                              label: item.label,
                              description: item.description,
                            }));
                          }}
                          title={item.description}
                        >
                          <div className={`p-1 rounded-full bg-${item.color}-100`}>
                            <IconComponent className={`text-${item.color}-600`} size={14} />
                          </div>
                          <div className="flex-1 min-w-0">
                            <span className="text-sm text-gray-700 font-medium">{item.label}</span>
                            <p className="text-xs text-gray-500 truncate">{item.description}</p>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>

                {/* Error Handlers */}
                <div className="mb-4">
                  <h4 className="text-sm font-medium text-gray-700 mb-3 flex items-center">
                    <AlertTriangle size={14} className="mr-2" />
                    Error Handlers
                  </h4>
                  <div className="space-y-2">
                    {paletteItems.error_handlers.map((item) => {
                      const IconComponent = item.icon;
                      return (
                        <div
                          key={item.id}
                          className="flex items-center space-x-3 p-2 rounded-lg border border-gray-200 hover:bg-gray-50 cursor-pointer transition-colors"
                          draggable
                          onDragStart={(e) => {
                            e.dataTransfer.setData('application/json', JSON.stringify({
                              type: 'error_handler',
                              id: item.id,
                              label: item.label,
                              description: item.description,
                            }));
                          }}
                          title={item.description}
                        >
                          <div className={`p-1 rounded-full bg-${item.color}-100`}>
                            <IconComponent className={`text-${item.color}-600`} size={14} />
                          </div>
                          <div className="flex-1 min-w-0">
                            <span className="text-sm text-gray-700 font-medium">{item.label}</span>
                            <p className="text-xs text-gray-500 truncate">{item.description}</p>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>

                {/* Integrations */}
                <div className="mb-4">
                  <h4 className="text-sm font-medium text-gray-700 mb-3 flex items-center">
                    <Share2 size={14} className="mr-2" />
                    Integrations
                  </h4>
                  <div className="space-y-2">
                    {paletteItems.integrations.map((item) => {
                      const IconComponent = item.icon;
                      return (
                        <div
                          key={item.id}
                          className="flex items-center space-x-3 p-2 rounded-lg border border-gray-200 hover:bg-gray-50 cursor-pointer transition-colors"
                          draggable
                          onDragStart={(e) => {
                            e.dataTransfer.setData('application/json', JSON.stringify({
                              type: 'integration',
                              id: item.id,
                              label: item.label,
                              description: item.description,
                            }));
                          }}
                          title={item.description}
                        >
                          <div className={`p-1 rounded-full bg-${item.color}-100`}>
                            <IconComponent className={`text-${item.color}-600`} size={14} />
                          </div>
                          <div className="flex-1 min-w-0">
                            <span className="text-sm text-gray-700 font-medium">{item.label}</span>
                            <p className="text-xs text-gray-500 truncate">{item.description}</p>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>

                {/* AI Actions */}
                <div className="mb-4">
                  <h4 className="text-sm font-medium text-gray-700 mb-3 flex items-center">
                    <Brain size={14} className="mr-2" />
                    AI Actions
                  </h4>
                  <div className="space-y-2">
                    {paletteItems.ai_actions.map((item) => {
                      const IconComponent = item.icon;
                      return (
                        <div
                          key={item.id}
                          className="flex items-center space-x-3 p-2 rounded-lg border border-gray-200 hover:bg-gray-50 cursor-pointer transition-colors"
                          draggable
                          onDragStart={(e) => {
                            e.dataTransfer.setData('application/json', JSON.stringify({
                              type: 'ai_action',
                              id: item.id,
                              label: item.label,
                              description: item.description,
                            }));
                          }}
                          title={item.description}
                        >
                          <div className={`p-1 rounded-full bg-${item.color}-100`}>
                            <IconComponent className={`text-${item.color}-600`} size={14} />
                          </div>
                          <div className="flex-1 min-w-0">
                            <span className="text-sm text-gray-700 font-medium">{item.label}</span>
                            <p className="text-xs text-gray-500 truncate">{item.description}</p>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>

                {/* Data Operations */}
                <div className="mb-4">
                  <h4 className="text-sm font-medium text-gray-700 mb-3 flex items-center">
                    <Database size={14} className="mr-2" />
                    Data Operations
                  </h4>
                  <div className="space-y-2">
                    {paletteItems.data_operations.map((item) => {
                      const IconComponent = item.icon;
                      return (
                        <div
                          key={item.id}
                          className="flex items-center space-x-3 p-2 rounded-lg border border-gray-200 hover:bg-gray-50 cursor-pointer transition-colors"
                          draggable
                          onDragStart={(e) => {
                            e.dataTransfer.setData('application/json', JSON.stringify({
                              type: 'data_operation',
                              id: item.id,
                              label: item.label,
                              description: item.description,
                            }));
                          }}
                          title={item.description}
                        >
                          <div className={`p-1 rounded-full bg-${item.color}-100`}>
                            <IconComponent className={`text-${item.color}-600`} size={14} />
                          </div>
                          <div className="flex-1 min-w-0">
                            <span className="text-sm text-gray-700 font-medium">{item.label}</span>
                            <p className="text-xs text-gray-500 truncate">{item.description}</p>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>

                {/* Notifications */}
                <div className="mb-4">
                  <h4 className="text-sm font-medium text-gray-700 mb-3 flex items-center">
                    <Bell size={14} className="mr-2" />
                    Notifications
                  </h4>
                  <div className="space-y-2">
                    {paletteItems.notifications.map((item) => {
                      const IconComponent = item.icon;
                      return (
                        <div
                          key={item.id}
                          className="flex items-center space-x-3 p-2 rounded-lg border border-gray-200 hover:bg-gray-50 cursor-pointer transition-colors"
                          draggable
                          onDragStart={(e) => {
                            e.dataTransfer.setData('application/json', JSON.stringify({
                              type: 'notification',
                              id: item.id,
                              label: item.label,
                              description: item.description,
                            }));
                          }}
                          title={item.description}
                        >
                          <div className={`p-1 rounded-full bg-${item.color}-100`}>
                            <IconComponent className={`text-${item.color}-600`} size={14} />
                          </div>
                          <div className="flex-1 min-w-0">
                            <span className="text-sm text-gray-700 font-medium">{item.label}</span>
                            <p className="text-xs text-gray-500 truncate">{item.description}</p>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      )}

      {/* Main Canvas Area */}
      <div className="flex-1 flex flex-col">
        {/* Toolbar */}
        <div className="bg-white border-b border-gray-200 p-4 shadow-sm">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <div>
                <input
                  type="text"
                  value={workflowName}
                  onChange={(e) => setWorkflowName(e.target.value)}
                  className="text-xl font-bold text-gray-900 bg-transparent border-none focus:outline-none focus:ring-0"
                />
                <input
                  type="text"
                  value={workflowDescription}
                  onChange={(e) => setWorkflowDescription(e.target.value)}
                  className="text-sm text-gray-600 bg-transparent border-none focus:outline-none focus:ring-0 w-full"
                />
              </div>
            </div>
            
            <div className="flex items-center space-x-2">
              {/* Layout Controls */}
              <div className="flex items-center space-x-1 border-r border-gray-200 pr-4">
                <button
                  onClick={handleAutoArrange}
                  className="p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition-colors"
                  title="Auto Arrange"
                >
                  <Grid3X3 size={16} />
                </button>
                <button
                  onClick={handleZoomIn}
                  className="p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition-colors"
                  title="Zoom In"
                >
                  <Plus size={16} />
                </button>
                <button
                  onClick={handleZoomOut}
                  className="p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition-colors"
                  title="Zoom Out"
                >
                  <Minus size={16} />
                </button>
                <button
                  onClick={handleFitView}
                  className="p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition-colors"
                  title="Fit View"
                >
                  <Eye size={16} />
                </button>
                <button
                  onClick={handleFullScreen}
                  className={`p-2 rounded-lg transition-colors ${
                    isFullScreen 
                      ? 'text-blue-600 bg-blue-100 hover:bg-blue-200' 
                      : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'
                  }`}
                  title={isFullScreen ? "Exit Full Screen" : "Enter Full Screen"}
                >
                  {isFullScreen ? <Minimize size={16} /> : <Maximize size={16} />}
                </button>
              </div>

              {/* Action Buttons */}
              <button
                onClick={handleRun}
                disabled={isRunning}
                className="flex items-center space-x-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                {isRunning ? (
                  <>
                    <RefreshCw size={16} className="animate-spin" />
                    <span>Running...</span>
                  </>
                ) : (
                  <>
                    <Play size={16} />
                    <span>Run</span>
                  </>
                )}
              </button>
              <button 
                onClick={handleSave} 
                className="flex items-center space-x-2 px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors"
              >
                <Save size={16} />
                <span>Save</span>
              </button>
            </div>
          </div>
        </div>

        {/* React Flow Canvas */}
        <div className="flex-1">
          <ReactFlow
            nodes={nodes}
            edges={edges}
            onNodesChange={onNodesChange}
            onEdgesChange={onEdgesChange}
            onConnect={onConnect}
            onNodeClick={onNodeClick}
            onEdgeClick={onEdgeClick}
            nodeTypes={nodeTypes}
            fitView
            attributionPosition="bottom-left"
            defaultViewport={{ x: 0, y: 0, zoom: 0.8 }}
            minZoom={0.1}
            maxZoom={2}
            panOnDrag={true}
            selectNodesOnDrag={false}
            nodesDraggable={true}
            nodesConnectable={true}
            elementsSelectable={true}
            deleteKeyCode={['Backspace', 'Delete']}
            multiSelectionKeyCode={['Meta', 'Ctrl']}
          >
            <Controls 
              position="top-right"
              showZoom={false}
              showFitView={false}
              showInteractive={false}
            />
            <MiniMap 
              position="bottom-left"
              nodeColor={(node) => {
                switch (node.type) {
                  case 'trigger': return '#3B82F6';
                  case 'action': return '#10B981';
                  case 'condition': return '#F59E0B';
                  case 'delay': return '#8B5CF6';
                  case 'approval': return '#F97316';
                  case 'subworkflow': return '#6366F1';
                  case 'error_handler': return '#EF4444';
                  case 'integration': return '#3B82F6';
                  case 'ai_action': return '#8B5CF6';
                  case 'data_operation': return '#6B7280';
                  case 'notification': return '#EAB308';
                  default: return '#94A3B8';
                }
              }}
              maskColor="rgba(0, 0, 0, 0.1)"
            />
            <Background 
              variant={BackgroundVariant.Dots}
              gap={20} 
              size={1.5} 
              color="#E5E7EB"
              className="opacity-50"
            />
          </ReactFlow>
        </div>

        {/* Properties Panel */}
        {selectedNode && !isFullScreen && (
          <div className="w-80 bg-white border-l border-gray-200 p-4 shadow-lg">
            <div className="flex items-center justify-between mb-4">
              <h3 className="font-semibold text-gray-900">Node Properties</h3>
              <button
                onClick={() => setSelectedNode(null)}
                className="p-1 text-gray-400 hover:text-gray-600 rounded-lg hover:bg-gray-100 transition-colors"
              >
                <XCircle size={16} />
              </button>
            </div>
            
            <div className="space-y-4">
              <div className="flex items-center space-x-2">
                <span className="text-sm font-medium text-gray-700">Type:</span>
                <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                  selectedNode.type === 'trigger' ? 'bg-blue-100 text-blue-800' :
                  selectedNode.type === 'action' ? 'bg-green-100 text-green-800' :
                  selectedNode.type === 'condition' ? 'bg-yellow-100 text-yellow-800' :
                  'bg-gray-100 text-gray-800'
                }`}>
                  {selectedNode.type?.charAt(0).toUpperCase() + selectedNode.type?.slice(1)}
                </span>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Label</label>
                <input
                  type="text"
                  value={selectedNode.data.label}
                  onChange={(e) => {
                    setNodes((nds) =>
                      nds.map((node) =>
                        node.id === selectedNode.id
                          ? { ...node, data: { ...node.data, label: e.target.value } }
                          : node
                      )
                    );
                  }}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Description</label>
                <textarea
                  value={selectedNode.data.description}
                  onChange={(e) => {
                    setNodes((nds) =>
                      nds.map((node) =>
                        node.id === selectedNode.id
                          ? { ...node, data: { ...node.data, description: e.target.value } }
                          : node
                      )
                    );
                  }}
                  rows={3}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors resize-none"
                />
              </div>

              <div className="pt-4 border-t border-gray-200 space-y-2">
                <button
                  onClick={() => {
                    setNodes((nds) => nds.filter((node) => node.id !== selectedNode.id));
                    setEdges((eds) => eds.filter((edge) => edge.source !== selectedNode.id && edge.target !== selectedNode.id));
                    setSelectedNode(null);
                  }}
                  className="w-full flex items-center justify-center space-x-2 px-3 py-2 text-red-600 bg-red-50 border border-red-200 rounded-lg hover:bg-red-100 transition-colors"
                >
                  <Trash2 size={16} />
                  <span>Delete Node</span>
                </button>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Transition Dialogue Box */}
      <TransitionDialogueBox
        isOpen={isTransitionDialogueOpen}
        onClose={handleTransitionCancel}
        transition={currentTransition}
        onSave={handleTransitionSave}
        onDelete={handleTransitionDelete}
      />
    </div>
  );
}

// Main Export Component
export default function WorkflowBuilder() {
  return (
    <ReactFlowProvider>
      <WorkflowBuilderContent />
    </ReactFlowProvider>
  );
}
